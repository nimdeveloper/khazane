name: Release Tauri App

on:
    push:
        tags:
            - "app-v*"

jobs:
    build:
        environment: stable
        permissions: write-all
        strategy:
            fail-fast: false
            matrix:
                include:
                    # - platform: "macos-latest" # for Arm based macs (M1 and above).
                    #   args: "--target aarch64-apple-darwin"
                    # - platform: "macos-latest" # for Intel based macs.
                    #   args: "--target x86_64-apple-darwin"
                    # - platform: "ubuntu-22.04"
                    #   args: ""
                    - platform: "windows-latest"
                      args: ""

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 21

            - name: Enable Corepack
              run: |
                  corepack enable
                  yarn set version stable

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
              with:
                  # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: "./src-tauri -> target"

            - name: install frontend dependencies
              # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
              run: yarn install # change this to npm or pnpm depending on which one you use.

            - uses: tauri-apps/tauri-action@v0
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
                  GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
              with:
                  tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
                  releaseName: "App v__VERSION__"
                  releaseBody: "See the assets to download this version and install."
                  releaseDraft: false
                  prerelease: false
                  args: ${{ matrix.args }}

    update-latest:
        needs: build
        runs-on: ubuntu-latest
        permissions: write-all
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/app-v') }}
        env:
            GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Get all tags
              id: get-all-tags
              uses: actions/github-script@v6
              with:
                  script: |
                      const tags = await github.rest.repos.listTags({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        per_page: 100
                      });

                      const versions = tags.data
                        .map(tag => tag.name.replace('app-', ''))
                        .filter(tag => tag !== 'latest');

                      core.setOutput("tags", versions.join(" "));

            - name: Determine highest version tag
              id: determine-highest
              run: |
                  highest=$(echo "${{ steps.get-all-tags.outputs.tags }}" | tr ' ' '\n' | sort -V | tail -n 1)
                  echo "highest=$highest" >> $GITHUB_ENV
                  echo "highest=$highest" >> $GITHUB_OUTPUT
              shell: bash

            - name: Get release assets
              id: get-release
              uses: actions/github-script@v7
              with:
                  script: |
                      const release = await github.rest.repos.getReleaseByTag({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag: "app-" + process.env.highest
                      });
                      core.setOutput("release_id", release.data.id);

            - name: Create or update latest release
              uses: actions/github-script@v7
              with:
                  script: |
                      await github.rest.repos.updateRelease({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          release_id: "${{ steps.get-release.outputs.release_id }}",
                          make_latest: true,
                          draft: false,
                          prerelease: false
                      });
