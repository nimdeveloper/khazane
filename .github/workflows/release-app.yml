name: Release Tauri App

on:
    push:
        tags:
            - "app-v*"

jobs:
    build:
        environment: stable
        permissions: write-all
        strategy:
            fail-fast: false
            matrix:
                include:
                    # - platform: "macos-latest" # for Arm based macs (M1 and above).
                    #   args: "--target aarch64-apple-darwin"
                    # - platform: "macos-latest" # for Intel based macs.
                    #   args: "--target x86_64-apple-darwin"
                    # - platform: "ubuntu-22.04"
                    #   args: ""
                    - platform: "windows-latest"
                      args: ""

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 21

            - name: Enable Corepack
              run: |
                  corepack enable
                  yarn set version stable

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
              with:
                  # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: "./src-tauri -> target"

            - name: install frontend dependencies
              # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
              run: yarn install # change this to npm or pnpm depending on which one you use.

            - uses: tauri-apps/tauri-action@v0
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
                  releaseName: "App v__VERSION__"
                  releaseBody: "See the assets to download this version and install."
                  releaseDraft: true
                  prerelease: false
                  args: ${{ matrix.args }}

    update-latest:
        needs: build
        runs-on: ubuntu-latest
        if: ${{ github.event_name == 'workflow_dispatch' }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Get release assets
              id: get-release
              uses: actions/github-script@v6
              with:
                  script: |
                      const release = await github.rest.repos.getReleaseByTag({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag: '${{ github.ref_name }}'
                      });
                      return release.data;

            - name: Create or update latest release
              uses: actions/github-script@v6
              with:
                  script: |
                      try {
                        // Get existing latest release
                        const latestRelease = await github.rest.repos.getReleaseByTag({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          tag: 'latest'
                        });
                        
                        // Update existing release
                        await github.rest.repos.updateRelease({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          release_id: latestRelease.data.id,
                          tag_name: 'latest',
                          name: 'Latest Release',
                          body: 'This is the latest stable release of the app.\n\n' + 
                                'Original release: ${{ github.ref_name }}',
                          draft: false,
                          prerelease: false
                        });
                      } catch (error) {
                        // Create new release if it doesn't exist
                        await github.rest.repos.createRelease({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          tag_name: 'latest',
                          name: 'Latest Release',
                          body: 'This is the latest stable release of the app.\n\n' + 
                                'Original release: ${{ github.ref_name }}',
                          draft: false,
                          prerelease: false
                        });
                      }

            - name: Upload assets to latest release
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ fromJson(steps.get-release.outputs.result).upload_url }}
                  asset_path: src-tauri/target/release/bundle/msi/khazane_${{ github.ref_name }}_x64_en-US.msi
                  asset_name: khazane_latest_x64_en-US.msi
                  asset_content_type: application/octet-stream

            - name: Upload assets to latest release
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ fromJson(steps.get-release.outputs.result).upload_url }}
                  asset_path: src-tauri/target/release/bundle/nsis/khazane_${{ github.ref_name }}_x64-setup.exe
                  asset_name: khazane_latest_x64-setup.exe
                  asset_content_type: application/octet-stream
